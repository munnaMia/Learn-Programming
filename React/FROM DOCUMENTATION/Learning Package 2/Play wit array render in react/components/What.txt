Updating arrays without mutation:
=================================== 
In JavaScript, arrays are just another kind of object. Like with objects, you should treat arrays in React state as read-only. This means that you shouldn’t reassign items inside an array like arr[0] = 'bird', and you also shouldn’t use methods that mutate the array, such as push() and pop().

Instead, every time you want to update an array, you’ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like filter() and map(). Then you can set your state to the resulting new array.

Here is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:




                              avoid (mutates the array)	        prefer (returns a new array)

            adding	     --   push, unshift	                    concat, [...arr] spread syntax (example)
            removing	 --   pop, shift,                       splice	filter, slice (example)
            replacing	 --   splice, arr[i] = ... assignment	map (example)
            sorting	     --   reverse, sort                     copy the array first (example)